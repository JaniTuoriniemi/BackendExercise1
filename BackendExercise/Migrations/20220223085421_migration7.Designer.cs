// <auto-generated />
using BackendExercise.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendExercise.Migrations
{
    [DbContext(typeof(PersonContext))]
    [Migration("20220223085421_migration7")]
    partial class migration7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BackendExercise.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"), 1L, 1);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Countryname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.HasIndex("CountryID");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            CityID = -2,
                            CityName = "Stockholm",
                            CountryID = -1,
                            Countryname = "Sweden"
                        },
                        new
                        {
                            CityID = -1,
                            CityName = "Göteborg",
                            CountryID = -1,
                            Countryname = "Sweden"
                        });
                });

            modelBuilder.Entity("BackendExercise.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"), 1L, 1);

                    b.Property<string>("Countryname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            CountryID = -1,
                            Countryname = "Sweden"
                        });
                });

            modelBuilder.Entity("BackendExercise.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"), 1L, 1);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("PersonID");

                    b.HasIndex("CityID");

                    b.ToTable("Person", (string)null);

                    b.HasData(
                        new
                        {
                            PersonID = -1,
                            CityID = -1,
                            CityName = "Göteborg",
                            Name = "Bosse",
                            Phone = 54321
                        },
                        new
                        {
                            PersonID = -2,
                            CityID = -2,
                            CityName = "Stockholm",
                            Name = "Fredrik",
                            Phone = 12345
                        });
                });

            modelBuilder.Entity("BackendExercise.Models.City", b =>
                {
                    b.HasOne("BackendExercise.Models.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendExercise.Models.Person", b =>
                {
                    b.HasOne("BackendExercise.Models.City", null)
                        .WithMany("Inhabitants")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendExercise.Models.City", b =>
                {
                    b.Navigation("Inhabitants");
                });

            modelBuilder.Entity("BackendExercise.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
